unit uPSI_API_Files;

{
  This file has been generated by UnitParser v0.7, written by M. Knight
  and updated by NP. v/d Spek and George Birbilis.
  Source Code from Carlo Kok has been used to implement various sections of
  UnitParser. Components of ROPS are used in the construction of UnitParser,
  code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
  SysUtils, Classes, uPSComponent, uPSRuntime, uPSCompiler;

type
  (* ---------------------------------------------------------------------------- *)
  TPSImport_API_Files = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript;
      const ri: TPSRuntimeClassImporter); override;
  end;

  { compile-time registration functions }
procedure SIRegister_TAPI_Files(CL: TPSPascalCompiler);
procedure SIRegister_API_Files(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAPI_Files(CL: TPSRuntimeClassImporter);
procedure RIRegister_API_Files(CL: TPSRuntimeClassImporter);

procedure Register;

implementation

uses
  APIBase, API_Output, NovusFileUtils, API_Files;

procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_API_Files]);
end;

(* === compile-time registration functions === *)
(* ---------------------------------------------------------------------------- *)
procedure SIRegister_TAPI_Files(CL: TPSPascalCompiler);
begin
  // with RegClassS(CL,'TAPIBase', 'TAPI_Files') do
  with CL.AddClassN(CL.FindClass('TAPIBase'), 'TAPI_Files') do
  begin
    RegisterMethod
      ('Function AbsoluteFilePath( const aFilename : string) : string');
    RegisterMethod
      ('Function Extractfilename( const aFilename : string) : string');
    RegisterMethod
      ('Function IncludeTrailingPathDelimiter( const aPath : string) : String');
    RegisterMethod('Function Exists( const aFilename : String) : Boolean');
    RegisterMethod
      ('Function Copy( const aSourceFilename : String; const aDestFilename : String; const aOverWrite : Boolean) : Boolean');
    RegisterMethod('Function Delete( const aFilename : String) : Boolean');
    RegisterMethod('Function Rename(const OldName: String; const NewName: String): boolean');
    RegisterMethod('Function Move( const aSourceFilename : String; const aDestFilename : String) : Boolean');
    RegisterMethod('Function IsFileInUse(const aFilename: string): boolean');
    RegisterMethod('Function IsFileReadonly(const aFilename: string): boolean');
    RegisterMethod('function MakeTmpFileName(aExt: string; aUseGUID: Boolean): String');
  end;
end;

(* ---------------------------------------------------------------------------- *)
procedure SIRegister_API_Files(CL: TPSPascalCompiler);
begin
  SIRegister_TAPI_Files(CL);
end;

(* === run-time registration functions === *)
(* ---------------------------------------------------------------------------- *)
procedure RIRegister_TAPI_Files(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAPI_Files) do
  begin
    RegisterMethod(@TAPI_Files.IsFileReadonly, 'IsFileReadonly');
    RegisterMethod(@TAPI_Files.IsFileInUse, 'IsFileInUse');
    RegisterMethod(@TAPI_Files.AbsoluteFilePath, 'AbsoluteFilePath');
    RegisterMethod(@TAPI_Files.Extractfilename, 'Extractfilename');
    RegisterMethod(@TAPI_Files.IncludeTrailingPathDelimiter,
      'IncludeTrailingPathDelimiter');
    RegisterMethod(@TAPI_Files.Exists, 'Exists');
    RegisterMethod(@TAPI_Files.Copy, 'Copy');
    RegisterMethod(@TAPI_Files.Delete, 'Delete');
    RegisterMethod(@TAPI_Files.RenameFile, 'Rename');
    RegisterMethod(@TAPI_Files.Move, 'Move');
    RegisterMethod(@TAPI_Files.MakeTmpFileName, 'MakeTmpFileName');
  end;
end;

(* ---------------------------------------------------------------------------- *)
procedure RIRegister_API_Files(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAPI_Files(CL);
end;

{ TPSImport_API_Files }
(* ---------------------------------------------------------------------------- *)
procedure TPSImport_API_Files.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_API_Files(CompExec.Comp);
end;

(* ---------------------------------------------------------------------------- *)
procedure TPSImport_API_Files.ExecImport1(CompExec: TPSScript;
  const ri: TPSRuntimeClassImporter);
begin
  RIRegister_API_Files(ri);
end;
(* ---------------------------------------------------------------------------- *)

end.
