unit uPSI_API_Zip;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis.
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface

uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;

type
(*----------------------------------------------------------------------------*)
  TPSImport_API_Zip = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;


{ compile-time registration functions }
procedure SIRegister_TAPI_Zip(CL: TPSPascalCompiler);
procedure SIRegister_TZIPOptions(CL: TPSPascalCompiler);
procedure SIRegister_API_Zip(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TAPI_Zip(CL: TPSRuntimeClassImporter);
procedure RIRegister_TZIPOptions(CL: TPSRuntimeClassImporter);
procedure RIRegister_API_Zip(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   APIBase
  ,IOUtils
  ,NovusFileUtils
  ,AbZipper
  ,AbArcTyp
  ,AbZBrows
 // ,AbMeter
  ,AbBrowse
  ,AbBase
  ,AbUnzper
  ,AbZipKit
  ,AbZipTyp
  ,AbUtils
  ,StrUtils
  ,API_Zip
  ;


procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_API_Zip]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TAPI_Zip(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TAPIBase', 'TAPI_Zip') do
  with CL.AddClassN(CL.FindClass('TAPIBase'),'TAPI_Zip') do
  begin
    RegisterMethod('Function Compress( const aZipFilename : String; const aPath : String; const aFileMasks : String; const aZIPOptions : TZIPOptions) : Boolean');
    RegisterMethod('Function BrowserList( const aZipFilename : String; var aZipStringList : TStringList; const aIncludePath : Boolean; const aZIPOptions : TZIPOptions) : Boolean');
    RegisterMethod('Function ExtractAll( const aZipFilename : String; const aPath : string; const aZIPOptions : TZIPOptions) : Boolean');
    RegisterMethod('Function ExtractFile( const aZipFilename : String; const aFileName : string; const aPath : string; const aZIPOptions : TZIPOptions) : Boolean');
    RegisterProperty('OnBeforeZIPEvent', 'TZIPEvent', iptrw);
    RegisterProperty('OnAfterZIPEvent', 'TZIPEvent', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TZIPOptions(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPersistent', 'TZIPOptions') do
  with CL.AddClassN(CL.FindClass('TPersistent'),'TZIPOptions') do
  begin
    RegisterMethod('Constructor Create');
    RegisterProperty('ExcludedFile', 'TStringlist', iptrw);
    RegisterProperty('Password', 'String', iptrw);
    RegisterProperty('Output', 'Boolean', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_API_Zip(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TZIPEvent', 'Procedure');
  SIRegister_TZIPOptions(CL);
  SIRegister_TAPI_Zip(CL);
  CL.AddConstantN('API_Zip_NotFileExists','String').SetString( 'ZipFilename cannot be found [%s]');
  CL.AddConstantN('API_Zip_FileInUse','String').SetString( 'Cannot add this file being used [%s]');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TAPI_ZipAfterZIPEvent_W(Self: TAPI_Zip; const T: TZIPEvent);
begin Self.OnAfterZIPEvent := T; end;

(*----------------------------------------------------------------------------*)
procedure TAPI_ZipAfterZIPEvent_R(Self: TAPI_Zip; var T: TZIPEvent);
begin T := Self.OnAfterZIPEvent; end;

(*----------------------------------------------------------------------------*)
procedure TAPI_ZipBeforeZIPEvent_W(Self: TAPI_Zip; const T: TZIPEvent);
begin Self.OnBeforeZIPEvent := T; end;

(*----------------------------------------------------------------------------*)
procedure TAPI_ZipBeforeZIPEvent_R(Self: TAPI_Zip; var T: TZIPEvent);
begin T := Self.OnBeforeZIPEvent; end;

(*----------------------------------------------------------------------------*)
procedure TZIPOptionsOutput_W(Self: TZIPOptions; const T: Boolean);
begin Self.Output := T; end;

(*----------------------------------------------------------------------------*)
procedure TZIPOptionsOutput_R(Self: TZIPOptions; var T: Boolean);
begin T := Self.Output; end;

(*----------------------------------------------------------------------------*)
procedure TZIPOptionsPassword_W(Self: TZIPOptions; const T: String);
begin Self.Password := T; end;

(*----------------------------------------------------------------------------*)
procedure TZIPOptionsPassword_R(Self: TZIPOptions; var T: String);
begin T := Self.Password; end;

(*----------------------------------------------------------------------------*)
procedure TZIPOptionsExcludedFile_W(Self: TZIPOptions; const T: TStringlist);
begin Self.ExcludedFile := T; end;

(*----------------------------------------------------------------------------*)
procedure TZIPOptionsExcludedFile_R(Self: TZIPOptions; var T: TStringlist);
begin T := Self.ExcludedFile; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAPI_Zip(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAPI_Zip) do
  begin
    RegisterMethod(@TAPI_Zip.Compress, 'Compress');
    RegisterMethod(@TAPI_Zip.BrowserList, 'BrowserList');
    RegisterMethod(@TAPI_Zip.ExtractAll, 'ExtractAll');
    RegisterMethod(@TAPI_Zip.ExtractFile, 'ExtractFile');
    RegisterPropertyHelper(@TAPI_ZipBeforeZIPEvent_R,@TAPI_ZipBeforeZIPEvent_W,'BeforeZIPEvent');
    RegisterPropertyHelper(@TAPI_ZipAfterZIPEvent_R,@TAPI_ZipAfterZIPEvent_W,'AfterZIPEvent');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TZIPOptions(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TZIPOptions) do
  begin
    RegisterVirtualConstructor(@TZIPOptions.Create, 'Create');
    RegisterPropertyHelper(@TZIPOptionsExcludedFile_R,@TZIPOptionsExcludedFile_W,'ExcludedFile');
    RegisterPropertyHelper(@TZIPOptionsPassword_R,@TZIPOptionsPassword_W,'Password');
    RegisterPropertyHelper(@TZIPOptionsOutput_R,@TZIPOptionsOutput_W,'Output');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_API_Zip(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TZIPOptions(CL);
  RIRegister_TAPI_Zip(CL);
end;



{ TPSImport_API_Zip }
(*----------------------------------------------------------------------------*)
procedure TPSImport_API_Zip.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_API_Zip(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_API_Zip.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_API_Zip(ri);
end;
(*----------------------------------------------------------------------------*)


end.
